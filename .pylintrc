[MASTER]

# Specify a configuration file.
#rcfile=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Profiled execution.
#profile=no

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore=.git,doc,

# Pickle collected data for later comparisons.
persistent=yes

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=


[MESSAGES CONTROL]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time. See also the "--disable" option for examples.
#enable=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"
#disable=

disable=
 # pylint 1.3.1 error names
 missing-docstring,
 no-self-use,
 unused-argument,
 too-few-public-methods,
 no-member,
 interface-not-implemented,
 super-on-old-class,
 slots-on-old-class,
 locally-disabled,
 maybe-no-member,
 old-style-class,
 no-init,
 superfluous-parens,
 bad-continuation,
 bad-whitespace,
 super-init-not-called,
 duplicate-code,
 file-ignored,
 # pylint 1.6.4 error names
 wrong-import-order,
 wrong-import-position,
 ungrouped-imports,
 bad-staticmethod-argument,
 redundant-unittest-assert,
 no-name-in-module,
 consider-iterating-dictionary,
 undefined-loop-variable,
 bad-option-value,
 arguments-differ,
 # Note: redefined-variable-type is buggy: https://github.com/PyCQA/pylint/issues/710
 # make sure it is re-enabled when the pylint what we use is fixed.
 redefined-variable-type,
 too-many-lines,
 too-many-arguments,
 line-too-long,

 #These rules disabled temporarily because of pylint 2.1.0 upgrade
 len-as-condition,
 no-else-return,
 assignment-from-no-return,
 useless-super-delegation,
 useless-return,
 c-extension-no-member,
 consider-using-in,
 redefined-outer-name,
 try-except-raise,
 inconsistent-return-statements,
 no-value-for-parameter,
 unsubscriptable-object,
 not-an-iterable,
 redefined-argument-from-local,
 useless-object-inheritance,
 trailing-comma-tuple,
 consider-using-set-comprehension,
 redefined-builtin,
 too-many-locals,
 not-callable,
 consider-merging-isinstance

# C0111     missing-docstring       Our priority is to make the code document
#                                   itself. Docstring is required only when
#                                   the signature is not enough to tell
#                                   everything important.
#
# W0611     unused-import           Pylint does not count our type-hinting
#                                   annotations as a use of a class name, thus,
#                                   this rule results in many false-positives.
#                                   rule: W9611
#
# R0201     no-self-use             Extracting private methods inside a class
#                                   to increase readability often results in
#                                   some methods that don't use the `self`.
#
# W0613     unused-argument         Methods of test doubles, for example stubs,
#                                   often return canned values, not using any
#                                   of their arguments.
#
# R0903     too-few-public-methods  Node classes often have no methods at all.
#
# E1101     no-member               Used when a variable is accessed for a
#                                   nonexistent member.
#                                   Reason: Too many false positives
#
# R0923     interface-not-implemented
#                                   Reason: Too many false positives, pylint
#                                   tries to determine if the class is an abstract
#                                   by searching for NotImplementedError tokens.
#
# E1002     super-on-old-class      Use of super on an old style class
#                                   Reason: collections.* recognized as old-style
#                                   class (Python 3 does not have old-style classes)
#
# E1001     slots-on-old-class      Use of __slots__ on an old style class
#                                   Reason: see E1002
#
# I0011     locally-disabled        Disabling a Pylint warning is always the
#                                   result of a decision, no additional notification
#                                   is required to tell us what we did.
#
# E1103     maybe-no-member         This message is useless since it produces too many false
#                                   positives (i.e. it thinks Resolver.resolve consistently
#                                   returns a Path instance).
#
# C1001     old-style-class         This message is irrelevant since Python 3.2 has no old-style
#                                   classes anymore.
#
# W0232     no-init                 New-style classes (see above) do not require __init__ methods,
#                                   the object class has a perfectly fine default constructor.
#
# C0325     superfluous-parens      Writing `not (a == b)` is equivalent with `not a == b`,
#                                   however, adding the parenthesis can often improve readability.
#
# C0326     bad-whitespace          Too many false positives, often misses tabularly indented
#                                   data in unit tests.
#
# C0330     bad-continuation        Too many false positives.
#
# W0231     super-init-not-called   We often write test doubles (stubs, fakes, etc.) for production
#                                   collaborators of various classes so we can unit test them. Most
#                                   of such test-doubles don't call super's __init__(), requiring a
#                                   lot of noise disabling this warning for all of them. Also, if a
#                                   production class does not call its super's __init__() and it
#                                   triggers a bug, then it should be caught by a test instead.
#
# R0801     duplicate-code          Most of the issues reported as duplicate code are in fact import
#                                   sections of highly similar plugins (i.e. presenters that definitely
#                                   will have the same import section in a lot of cases). Because of
#                                   this many false positives were reported.
#
# I0013     file-ignored            Some external utilities tracked in the nnX repository should
#                                   not be checked (i.e. scripts/xmlrunner.py).
#
# C0302     too-many-lines          The length of a Python file does not determine its complexity, some
#                                   files may contain long, multi-line string constants.
#
# R0913     too-many-arguments      Used when a function or method takes too many arguments.

[REPORTS]

# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html. You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
#output-format=parseable

# Put messages in a separate file for each module / package specified on the
# command line instead of printing them on stdout. Reports (if any) will be
# written in a file name "pylint_global.[txt|html]".
files-output=no

# Tells whether to display a full report or only the messages
reports=no

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Add a comment according to your evaluation note. This is used by the global
# evaluation report (RP0004).
#comment=no

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details
msg-template={path}:{line}: [{msg_id}({symbol}), {obj}] {msg}


[SIMILARITIES]

# Minimum lines number of a similarity.
min-similarity-lines=5

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=no


[VARIABLES]

# Tells whether we should check for unused import in __init__ files.
init-import=yes

# A regular expression matching the beginning of the name of dummy variables
# (i.e. not used).
dummy-variables-rgx=_$|dummy

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=


[BASIC]

# Required attributes for module, separated by a comma
#required-attributes=

# List of builtins function names that should not be used, separated by a comma
bad-functions=map,filter,apply,input

# Regular expression which should only match correct module names
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Regular expression which should only match correct module level names
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Regular expression which should only match correct class names
class-rgx=[A-Z_][a-zA-Z0-9]+$

# Regular expression which should only match correct function names
# Private functions are allowed to have nice explanatory names
function-rgx=(([a-z][a-z0-9_]{2,30})|(__?[a-z_0-9]{2,70})|((test|assert)[a-zA-Z0-9_]{2,100}))$

# Regular expression which should only match correct method names
# Private methods and BDD-style xUnit test methods and data_provider methods
# are allowed to have nice explanatory names
method-rgx=(([a-z][a-z0-9_]{2,37})|((_|provide_)[a-z_0-9]{2,70})|((test|assert)[a-zA-Z0-9_]{2,100}))$

# Regular expression which should only match correct instance attribute names
# Private instance attribute names are allowed to have nice explanatory names
# The unittest module uses camelCase for some useful properties, they are allowed
attr-rgx=((_?[a-z][a-z0-9_]{2,35})|(__[a-z_0-9]{2,70}))$

# Regular expression which should only match correct argument names
# Type annotated short argument names are okay
argument-rgx=[a-z_][a-z0-9_]{0,35}$

# Regular expression which should only match correct variable names
variable-rgx=[a-z_][a-z0-9_]{1,35}$

# Regular expression which should only match correct attribute names in class
# bodies
class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,70}|(__.*__))$

# Regular expression which should only match correct list comprehension /
# generator expression variable names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_,f,ip,ha,hw,ca,id,_id,_fs

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata,tmp,tmp2

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=__.*__

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO


[FORMAT]

# Maximum number of characters on a single line.
max-line-length=120

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Maximum number of lines in a module
max-module-lines=1000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '


[TYPECHECK]

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
ignored-classes=SQLObject

# When zope mode is activated, add a predefined set of Zope acquired attributes
# to generated-members.
#zope=no

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed. Python regular
# expressions are accepted.
generated-members=REQUEST,acl_users,aq_parent


[DESIGN]

# Maximum number of arguments for function / method
max-args=5

# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names=_.*

# Maximum number of locals for function / method body
max-locals=15

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of branch for function / method body
max-branches=12

# Maximum number of statements in function / method body
max-statements=50

# Maximum number of parents for a class (see R0901).
max-parents=10

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Minimum number of public methods for a class (see R0903).
min-public-methods=0

# Maximum number of public methods for a class (see R0904).
# Classes inheriting from unittest.TestCase may have more than 50 methods
max-public-methods=100


[IMPORTS]

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,TERMIOS,Bastion,rexec

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph=pylint_import_graph.dot

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=pylint_ext_import-graph.dot

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph=pylint_int_import-graph.dot


[CLASSES]

# List of interface methods to ignore, separated by a comma. This is used for
# instance to not check methods defines in Zope's Interface base class.
#ignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,set_up,setUp,_initialize

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to
# "Exception"
overgeneral-exceptions=Exception
